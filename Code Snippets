Here is where we put code pieces that we are working on integrating;
This will keep our main.js clean



 {
      event.preventDefault();
      blah = setInterval(function() {
        Player2.prototype.controls(event.key, 10);
      }, 10);
      }






To change background, change CTX fillstyle


  //IN THE SHIP RECEIVEDAMAGE METHOD, INCLUDE THIS METHOD FOR THE GAME TO CHECK WHO RECEIVED DAMAGE.
  //this needs testing
  // this;




/* THE WORKSHOP: GIANNINI'S CODE IN PROGRESS WILL GO HERE */
  var spd = 10;
  var health = 300;
  var atk = 400;
  var player1 = [];
  var palyer2 = [];

// ---------------------((()))
  // // // PLAYER 1 PLAYER 1 PLAYER 1 PLAYER 1 PLAYER 1 PLAYER 1 PLAYER 1 PLAYER 1 PLAYER 1 PLAYER 1
  // function Player1(spd, health, atk,){
  // }
  // Player1.prototype = Object.create(Ship.prototype);
  // Player1.prototype.constructor = Player1
  // // Player1.prototype.spawn =
  // Car.prototype.move = function(whichKey, speed){
  //   ctx.clearRect(this.x, this.y, this.width, this.height);
  //     case 'ArrowLeft':
  //     if(this.canMove(this.x - speed, this.y)){
  //       this.x -=speed;
  //     }
  //     break;
  //     case 'ArrowRight':
  //     if(this.canMove(this.x + speed, this.y)){
  //       this.x +=speed;
  //     }
  //     break;
  //     case 'ArrowUp':
  //     if(this.canMove(this.x, this.y -speed)){
  //       this.y -= speed;
  //     }
  //     break;
  //     case 'ArrowDown':
  //     if(this.canMove(this.x, this.y + speed)){
  //       this.y +=speed;
  //     }
  //   }
  //   ctx.drawImage(theImage, this.x, this.y, this.width, this.height);
  // }
  // Car.prototype.canMove = function(futurex, futurey){
  //   if(
  //     futurex + this.width >= currentGame.obstacle.x &&
  //      futurex <= currentGame.obstacle.x + currentGame.obstacle.width &&
  //      futurey + this.height >= currentGame.obstacle.y &&
  //      futurey <= currentGame.obstacle.y + currentGame.obstacle.height
  //     ){
  //       return false
  //     } else if(
  //       futurex + this.width >= 500 ||
  //       futurex <= 0 ||
  //       futurey + this.height >= 700 ||
  //       futurey <= 0
  //     ){
  //       return false
  //     }
  //     return true;
  // }
  // function glassCannon(){
  //   spd = 25;
  //   health = 50;
  //   atk = 300;
  // }
  // // onclick insert ship type in to new ship function to give values
  // function glassCannon(typ3,spd, health, atk,name){
  //   Ship.call(spd, health, atk, this)
  //   this.spd = 10;
  //   this.health = 25;
  //   this.atk = 200;
  // }
  // shipG1 = new glassCannon();
  //   switch(whichKey){
  // glassCannon.prototype = Object.create(Ship.prototype);
  // glassCannon.prototype.constructor = glassCannon;
  // // ship.prototype.atk = function(amountOfDamage){
  // //     return this.atk;
  // // }
  // // ship.prototype.receiveDamage= function(amountOfDamage){
  // //     this.health -= damage;
  // // }
  // // ship.prototype.atk = function(amountOfDamage){
  // //     return this.atk;
  // // }
  // // ship.prototype.receiveDamage= function(amountOfDamage){
  // //     this.health -= damage;
  // // }
  // ship.prototype.atk = function(amountOfDamage){
  //     return this.atk;
  // }
  // ship.prototype.receiveDamage= function(amountOfDamage){
  //     this.health -= damage;
  // }
  //MOTION CONTROLS METHOD SET UP FOR SHIP
  // motion controls:
  // Player 1 Motion controls:
  // Left: q
  // Right:z
  // Forward:s
  // Back:a
  // Rotate counterclockwise:w
  // rotate clockwise:x
  // shooting: leftcapslock
  // =======
  // //DOM FUNCTIONS
  // document.getElementById('startGameButton').onclick = function(){
  //   theGame = new Game();
  //   console.log('you clicked the button')
  // }
  // Player 2 Motion controls:
  // Left:  left arrow
  // Right: right arrow
  // Forward: forward arrow
  // Back: back arrow
  // Rotate counterclock: /
  // rotate clockwise: right shift
  // shoot: .......